package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

// import org.springframework.data.repository.ID;

@RestController    // This means that this class is a Controller
@RequestMapping(path = "/polls") // This means URL's start with /demo (after Application path)
public class PollController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PollRepository PollRepository;

    @PostMapping(path = "/add")
    public @ResponseBody Poll addNewPoll(@RequestParam String absatz) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Poll poll=new Poll(absatz);
        try {
            PollRepository.save(poll);
        } catch (Exception e) {
        }
        return poll;
    }

    @PostMapping(path = "/upload")
    public @ResponseBody String uploadNewPolls(@RequestParam String allPolls) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        String[] arr=allPolls.split(",");

        for(String absatz:arr){
            try {
                Poll poll=new Poll(absatz);
                PollRepository.save(poll);
            } catch (Exception e) {
            }
        }

        return "Done";
    }

    @PutMapping(path = "/change/{id}")
    public Poll replacePollById(@RequestBody Poll newPoll,@PathVariable Integer id){
        return PollRepository.findById(id).map(poll->{
            poll.setLabel(newPoll.getLabel());
            return PollRepository.save(poll);
        }).orElseGet(()->{
            newPoll.setId(id);
            return PollRepository.save(newPoll);
        });
    }

    @GetMapping(path = "/get")
    public @ResponseBody
    Iterable<Poll> getAllPolls() {
        // This returns a JSON or XML with the users
        return PollRepository.findAll();
    }

    @GetMapping(path = "/get-no-label")
    public @ResponseBody
    Iterable<Poll> getAllPollsWithoutLabel() {
        // This returns a JSON or XML with the users
        return PollRepository.findPollsWithoutLabel();
    }

    @DeleteMapping(path = "/delete/{id}")
    public String deletePollById(@PathVariable Integer id){
        PollRepository.delete(PollRepository.findById(id).get());
        return "Poll @"+id+" successfully removed";
    }

    @DeleteMapping(path = "/delete")
    public String deleteAllPolls(){
        PollRepository.deleteAll();
        return "Done";
    }
}
